local suc, er = pcall(function()
    if game.PlaceId == 11488626438 then
    	local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
    	local Window = OrionLib:MakeWindow({Name = "SuperSpy Hub | [NEW] Rank Simulator X | âœ¨", HidePremium = false,IntroText = "SuperSpy Hub", SaveConfig = true, ConfigFolder = "SuperSpy"})
    
    	--Variables
    	_G.AutoFarmEnabled = false
    	_G.AutoHatchEnabled = false
    	_G.AutCraftEnabled = false
    	_G.ShowSecretsEnabled = false
    	_G.SimplifyEnabled = false
    	_G.RankUpEnabled = false
		_G.AutoChestsEnabled2 = false
		_G.ReachEnabled = false
		_G.AutoMineEnabled = false
    	local NextRank = "Unknown"
    	local Pause = false
    	local World = nil
    	local Egg = "Aqua"
    	local Player = game.Players.LocalPlayer.Name
    	local EggHandler = getsenv(game:GetService("Players").LocalPlayer.PlayerGui.Eggs.PreviewFrame.EggHandler)
    	local EggWorldViewer = require(game:GetService("ReplicatedStorage").Modules.Eggs)
    	local EggWorld = "Unknown"
		local NotificationText = "Unidentified"
		_G.Speed = 32
		
    
    	--Functions
    	function autoFarm()
    		local suc ,er = pcall(function()
    		    print(game.Players.LocalPlayer.PlayerGui["Rank Simulator X"].HUD.Left.RankDisplay.Percent.Text == "100%" , _G.RankUpEnabled == true)
    			while _G.AutoFarmEnabled == true and Pause == false do
    				if game.Players.LocalPlayer.PlayerGui["Rank Simulator X"].HUD.Left.RankDisplay.Percent.Text == "100%" and _G.RankUpEnabled == true then
    					Pause = true
    					NextRank = game.Players.LocalPlayer.Data.Rank.Value +1
    					local args = {
    						[1] = NextRank
    					}
    
    					game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("BuyRank"):FireServer(unpack(args))
    					Pause = false
                        wait(1)
    				else
    					local PositionsSorted = {}
    					local Character = game.Players.LocalPlayer.Character
    
    					repeat wait() until #workspace.SpawnZones[World]:GetChildren() > 0
    
    					for _, spawn in pairs(workspace.SpawnZones[World]:GetChildren()) do
    						if spawn.Name ~= "BlaBlaBla" then
    							table.insert(PositionsSorted, {spawn.MainPart.Position, spawn})
    						end
    					end
    
    					table.sort(PositionsSorted, function(a,b)
    						return (a[1] - Character.HumanoidRootPart.Position).Magnitude < (b[1] - Character.HumanoidRootPart.Position).Magnitude
    					end)
    
    					local Target = PositionsSorted[1][2]
    					local TargetPosition = PositionsSorted[1][1]
    
    					--pcall(function()
    					local Hl = Instance.new("Highlight", Target)
    					local Beam =  workspace:FindFirstChild("NANANANANAN")
    					local NewAT1 = Character.HumanoidRootPart:FindFirstChild("ATATATAT")
    					local NewAT2 = Instance.new("Attachment", Target.MainPart)
    					if Beam == nil then
    						Beam = Instance.new("Beam", workspace)
    						Beam.Name = "NANANANANAN"
    					end
    					if NewAT1 == nil then
    						NewAT1 = Instance.new("Attachment", Character.HumanoidRootPart)
    						NewAT1.Name = "ATATATAT"
    					end
    
    					Beam.Attachment0 = NewAT1
    					Beam.Attachment1 = NewAT2
    					Beam.FaceCamera = true
    					Beam.Width0 = 0.07
    					Beam.Width1 = 0.07
    					Beam.Color = ColorSequence.new(Color3.fromRGB(0, 255, 0))
    					Beam.LightInfluence = 0
    					Beam.Brightness = 10
    
    					Hl.FillColor = Color3.fromRGB(0,255,0)
    
    					Character.Humanoid:MoveTo(TargetPosition)
    					Character.Humanoid.MoveToFinished:Wait()
    					--end)
    
    					Target.Name = "BlaBlaBla"
    					Target.Highlight:Destroy()
    				end
    			end
    		end)
    		
    		if er then
    			warn(er)
    		end
    	end
    
    	function removeModels()
    		game:GetService("Workspace").Areas.Aqua.Deco:Destroy()
    		game:GetService("Workspace").Areas.Forest.Deco:Destroy()
    		game:GetService("Workspace").Areas.Frosty.Extra:Destroy()
    		game:GetService("Workspace").Areas.Mine.Deco:Destroy()
			workspace.Areas.Aqua.Base["Bubble Barrier"]:Destroy()
    	end
    
    	function autoHatch()
    		if _G.AutoHatchEnabled == true then
    			local args = {
    				[1] = EggWorld
    			}
    
    			game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Teleport"):InvokeServer(unpack(args))
    			wait(2)
    			workspace[Player].HumanoidRootPart.CFrame = Workspace.Eggs[Egg].Eggname.CFrame
    			while _G.AutoHatchEnabled == true do
    				wait(0.8)
    				EggHandler.eggRequest(3)
    			end
    		end
    	end
    
    	function Teleport()
    		local args = {
    			[1] = "AquaReturn"
    		}
    
    		game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Teleport"):InvokeServer(unpack(args))
    	end    
    
    	function autoCraft()
    		local suc, er = pcall(function()
    			while _G.AutCraftEnabled == true do
    				local l__ReplicatedStorage__1 = game:GetService("ReplicatedStorage");
    
    				local l__Modules__3 = l__ReplicatedStorage__1.Modules;
    				local l__Remotes__11 = l__ReplicatedStorage__1.Remotes;
    
    				local l__LocalPlayer__2 = game:GetService("Players").LocalPlayer;
    
    				local l__Pets__3 = l__LocalPlayer__2.Pets;
    				local l__PetAction__11 = l__Remotes__11.PetAction;
    
    				local NotiModule = require(l__Modules__3.GuiModules.Notifications);
    
    				local l__LeftSide__9 = game.Players.LocalPlayer.PlayerGui["Rank Simulator X"].HUD.Frames.Pets.LeftSide;
    				local l__RightSide__10 = game.Players.LocalPlayer.PlayerGui["Rank Simulator X"].HUD.Frames.Pets.RightSide;
    
    				local Pets = {};
    				local CraftedTotal = 0;
    
    				local Table = {};
    
    				local SortInventory = getsenv(game.Players.LocalPlayer.PlayerGui["Rank Simulator X"].HUD.Frames.Pets.Scripts.Handler).SortInventory
    
    				for _, Pet in pairs(l__Pets__3:GetChildren()) do
    					if Pet:FindFirstChild("PetName") then
    						if not Pets[Pet.PetName.Value .. Pet.Type.Value] then
    							Pets[Pet.PetName.Value .. Pet.Type.Value] = {
    								Amount = 1, 
    								BasePet = Pet.Name
    							};
    						else
    							local TotalPets = Pets[Pet.PetName.Value .. Pet.Type.Value];
    							TotalPets.Amount = TotalPets.Amount + 1;
    
    							if TotalPets.Amount == 5 then
    								l__PetAction__11:InvokeServer("Craft", Pet.Name);
    								TotalPets.Amount = 0;
    								TotalPets = CraftedTotal + 1;
    							end;
    						end;
    					end;
    				end;
    				if CraftedTotal == 1 then
    					l__LeftSide__9.DescriptionBlocker.Visible = true;
    					NotiModule.LayeredNotification("Succesfully crafted 1 pet", Color3.fromRGB(255, 247, 23), 2, l__ReplicatedStorage__1.Audio.Completed);
    				elseif CraftedTotal > 1 then
    					l__LeftSide__9.DescriptionBlocker.Visible = true;
    					NotiModule.LayeredNotification("Succesfully crafted " .. CraftedTotal .. " pets", Color3.fromRGB(255, 247, 23), 2, l__ReplicatedStorage__1.Audio.Completed);
    				end;
    				SortInventory();
    				wait(1);
    			end
    		end)
    
    		if er then
    			warn(er)
    		end
    	end
    	function simplifyRarities()
    		local s, e = pcall(function()
    			local Connection = nil
    			local List = game.Players.LocalPlayer.PlayerGui.Eggs.PreviewFrame.PetChances.List
    
    			if _G.SimplifyEnabled == true then
    				function update()
    					for _, PetFrame in pairs(List:GetChildren()) do
    						if PetFrame:IsA("Frame") then
    							if PetFrame.Pet:FindFirstChildOfClass("Model") then
    								PetFrame.Blue.BackgroundColor3 = PetFrame.Rarity.TextColor3
    							else
    								PetFrame.Blue.BackgroundColor3 = Color3.fromRGB(56, 173, 255)
    							end
    						end
    					end
    				end
    				update()
    				Connection = List.Parent.Parent.CurrentTarget.Changed:Connect(update)
    			else
    				for _, PetFrame in pairs(List:GetChildren()) do
    					if PetFrame:IsA("Frame") then
    						PetFrame.Blue.BackgroundColor3 = Color3.fromRGB(56, 173, 255)
    					end
    				end
    				pcall(function()
    					Connection:Disconnect()
    				end)
    			end
    		end)

    		if e then
    			warn(e)
    		end
    	end    

		function sendNoti()
			local Notifications = require(game:GetService("ReplicatedStorage").Modules.GuiModules.Notifications)
			Notifications.LayeredNotification(NotificationText,Color3.fromRGB(244, 46, 49), 1.5)
		end

    	function showSecrets()
    		local List = game.Players.LocalPlayer.PlayerGui.Eggs.PreviewFrame.PetChances.List
            local Connection = nil    

local suc, er = pcall(function()
    if _G.ShowSecretsEnabled then
        Connection = List.Parent.Parent.CurrentTarget.Changed:Connect(function()
            if List.Parent.Parent.CurrentTarget.Value ~= "" then
                local EggModule = require(game.ReplicatedStorage.Modules.Eggs)
                local EggFrame = nil
                
                function GetNext()
                    for i = 1, 9 do
                        local PetFrame = List["Pet".. i]
                        
                        if not PetFrame.Pet:FindFirstChildOfClass("Model") then
                            return i
                        end
                    end
                end
                
                local PetInfo = EggModule[List.Parent.Parent.CurrentTarget.Value]
                local Secrets = {}
                
                for _, Pet in pairs(PetInfo.Pets) do
                    if Pet.Secret == true then
                        table.insert(Secrets, Pet.Name)
                    end
                end
                
                for _, Secret in pairs(Secrets) do
                    wait()
                    local NextIndexFrame = GetNext()
                    local NewCamera = Instance.new("Camera")
                    local PetModel = game.ReplicatedStorage.Pets.Models[Secret]:Clone()
                    local Frame = List["Pet".. NextIndexFrame]
                    
                    local PrimaryPos = PetModel.PrimaryPart.Position
                    
                    PetModel.Parent = Frame.Pet
                    print(PetModel:GetFullName())
                    
                    Frame.Pet.CurrentCamera = NewCamera
                    NewCamera.CFrame = CFrame.new(Vector3.new(PrimaryPos.X - 2, PrimaryPos.Y, PrimaryPos.Z + 3), PrimaryPos);
                    local PrimaryPart = PetModel.PrimaryPart;
                    PrimaryPart.CFrame = PrimaryPart.CFrame * CFrame.Angles(0, 1.5707963267948966, 0);
                    
                    Frame.Rarity.Text = "Secret"
                    Frame.Rarity.TextColor3 = Color3.fromRGB(255,0,0)
                end
            end
        end)
    else
        Connection:Disconnect()
    end
end)

if er then
    warn(er)
end
end
    	function antiIdle()
			repeat wait() until game:IsLoaded() 
            game:GetService("Players").LocalPlayer.Idled:connect(function()
            game:GetService("VirtualUser"):ClickButton2(Vector2.new())
			end)
        end
	

		function autoClaim1()
			if _G.AutoChestsEnabled == true then
			while wait(5) do
			local ClaimChest = game.ReplicatedStorage.Remotes.ClaimChest
			ClaimChest:FireServer("Daily")
			end
		end
	end
        function autoClaim2()
			if _G.AutoChestsEnabled2 == true then
			while wait(5) do
			local ClaimChest = game.ReplicatedStorage.Remotes.ClaimChest
			ClaimChest:FireServer("Group")
			end
		end
	end

	function increaseSpeed()

		local Spoofed = {};
		local Clone = game.Clone;
		local oldIdx;
		local oldNewIdx;
		local OldNC;
		
		
		local Player = game:GetService("Players").LocalPlayer;
		
		local Methods = {
		   "FindFirstChild",
		   "FindFirstChildOfClass",
		   "FindFirstChildWhichIsA"
		}
		
		
		
		local function SpoofProp(Instance, Property)
		   local Cloned = Clone(Instance);
		
		   table.insert(Spoofed, {
			   Instance = Instance,
			   Property = Property;
			   ClonedInstance = Cloned;
		   })
		end
		
		
		oldIdx = hookmetamethod(game, "__index", function(self, key)
		   for i,v in next, Spoofed do
			   if self == v.Instance and key == v.Property and not checkcaller() then
				   return oldIdx(v.ClonedInstance, key)
			   end
		
			   if key == "Parent" and (self == v.ClonedInstance or self == v.Instance) and checkcaller() == false then
				   return oldIdx(v.Instance, key)
			   end
		   end
		
		   return oldIdx(self, key)
		end)
		
		oldNewIdx = hookmetamethod(game, "__newindex", function(self, key, newval, ...)
		   for i,v in next, Spoofed do
			   if self == v.Instance and key == v.Property and not checkcaller() then
				   return oldNewIdx(v.ClonedInstance, key, newval, ...);
			   end
		   end
		   return oldNewIdx(self, key, newval, ...)
		end)
		
		OldNC = hookmetamethod(game, "__namecall", function(self, ...)
		   
		   local Method = getnamecallmethod();
		
		   if not table.find(Methods, Method) or Player.Character == nil or self ~= Player.Character then
			   return OldNC(self, ...)
		   end
		   
		   local Results = OldNC(self, ...);
		
		   if Results and Results:IsA("Humanoid") and Player.Character and self == Player.Character then
			   for i,v in next, Spoofed do
				   if v.Instance == Results then
					   return v.ClonedInstance
				   end
			   end
		   end
		   return OldNC(self, ...)
		end)
		
		for i, Method in next, Methods do
		   local Old;
		
		   Old = hookfunction(game[Method], function(self, ...)
			   if not Player.Character or self ~= Player.Character then
				   return Old(self, ...)
			   end
		
			   local Results = Old(self, ...);
		
			   if Results and Results:IsA("Humanoid") and Player.Character and self == Player.Character then
				   for i,v in next, Spoofed do
					   if v.Instance == Results then
						   return v.ClonedInstance
					   end
				   end
			   end
			   return Old(self, ...)
		   end)
		end
		
		local character = Player.Character
		
		SpoofProp(character.Humanoid, "WalkSpeed")
		character.Humanoid.WalkSpeed = _G.Speed
		
		
		character.Humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
		   character.Humanoid.WalkSpeed = _G.Speed
		end)
		
		
		Player.CharacterAdded:Connect(function(character)
		   character:WaitForChild("Humanoid")
		   SpoofProp(character.Humanoid, "WalkSpeed")
		   character.Humanoid.WalkSpeed = _G.Speed
		
		   character.Humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
			   character.Humanoid.WalkSpeed = _G.Speed
			   end)
		   end)
		end

		function reachFarm()
			local players = game:GetService("Players")
			local player = players.LocalPlayer
			local character = player.Character or player.CharacterAdded:Wait()
			local playerHead = player.Character.Head
			
			print("Executed Star AutoFarm")
			
			while _G.ReachEnabled == true do
				task.wait()
				
				pcall(function()
					for _, Stars in pairs(game.Workspace.SpawnZones[World]:GetChildren()) do 
						if (Stars:IsA("Model")) then
							local TouchInterest = Stars.MainPart.TouchInterest
							firetouchinterest(playerHead, TouchInterest.Parent, 0)
							firetouchinterest(playerHead, TouchInterest.Parent, 1)
						end
					end
				end)
			end
		end
		
		function autoClaim3()
			while _G.AutoMineEnabled do
				local args = {
					[1] = "Mine"
				}
				
				game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ClaimChest"):FireServer(unpack(args))
				wait(5)		
			end		
			end	
    	--Tabs
    	local FarmTab = Window:MakeTab({
    		Name = "Farming",
    		Icon = "rbxassetid://11623114533",
    		PremiumOnly = false
    	})
    	local Pets = Window:MakeTab({
    		Name = "Pets",
    		Icon = "rbxassetid://11479682796",
    		PremiumOnly = false
    	})
    	local Extra = Window:MakeTab({
    		Name = "Extras",
    		Icon = "rbxassetid://12998364991",
    		PremiumOnly = false
    	})
		local Visuals = Window:MakeTab({
    		Name = "Visuals",
    		Icon = "rbxassetid://12952609622",
    		PremiumOnly = false
    	})
    	local Misc = Window:MakeTab({
    		Name = "Misc",
    		Icon = "rbxassetid://11479711653",
    		PremiumOnly = false
    	})
		
    
    	--Toggles
    	FarmTab:AddToggle({
    		Name = "AutoFarm",
    		Default = false,
    		Callback = function(Value)
    			_G.AutoFarmEnabled = Value
    			autoFarm()
    		end    
    	})
		FarmTab:AddToggle({
    		Name = "Reach",
    		Default = false,
    		Callback = function(Value)
    			_G.ReachEnabled = Value
    			reachFarm()
    		end    
    	})
    	Pets:AddToggle({
    		Name = "Auto Hatch",
    		Default = false,
    		Callback = function(Value)
    			_G.AutoHatchEnabled = Value
    			autoHatch()
    		end    
    	})
    	Pets:AddToggle({
    		Name = "Auto Craft",
    		Default = false,
    		Callback = function(Value)
    			_G.AutCraftEnabled = Value
    			autoCraft()
    		end    
    	})
    	Pets:AddToggle({
    		Name = "Simplify Rarities",
    		Default = false,
    		Callback = function(Value)
    			_G.SimplifyEnabled = Value
    			simplifyRarities()
    		end    
    	})
    	FarmTab:AddToggle({
    		Name = "Auto Rank UP [WITH AUTOFARM ONLY]",
    		Default = false,
    		Callback = function(Value)
    			_G.RankUpEnabled = Value
    		end    
    	})
    	Extra:AddToggle({
    		Name = "Auto Claim Daily Chest",
    		Default = false,
    		Callback = function(Value)
    			_G.AutoChestsEnabled = Value
				autoClaim1()
    		end    
			
    	})
		Extra:AddToggle({
    		Name = "Auto Claim Group Chest",
    		Default = false,
    		Callback = function(Value)
    			_G.AutoChestsEnabled2 = Value
				autoClaim2()
    		end    
			
    	})
		Pets:AddToggle({
    		Name = "Show Secrets",
    		Default = false,
    		Callback = function(Value)
    			_G.ShowSecretsEnabled = Value
				showSecrets()
    		end    
    	})
		Extras:AddToggle({
    		Name = "Auto Claim Mine Chest",
    		Default = false,
    		Callback = function(Value)
    			_G.AutoMineEnabled = Value
				autoClaim3()
    		end    
    	})
    
    
    	--Buttons
    	Misc:AddButton({
    		Name = "Remove Deco",
    		Callback = function()
    			removeModels()
    		end    
    	})
    	Misc:AddButton({
    		Name = "Teleport To Spawn",
    		Callback = function()
    			Teleport()
    		end    
    	})
		Misc:AddButton({
    		Name = "Anti IDLE",
    		Callback = function()
    			antiIdle()
    		end    
    	})
		Visuals:AddButton({
    		Name = "Send Notification",
    		Callback = function()
    			sendNoti()
    		end    
    	})
		Misc:AddButton({
    		Name = "Set 100 Speed",
    		Callback = function()
				_G.Speed = 100
    			increaseSpeed()
    		end    
    	})
    
    
    
    	--DropDowns
    	FarmTab:AddDropdown({
    		Name = "Select World",
    		Default = "1",
    		Options = {"Forest", "Frosty", "Mine", "Aqua", "Steampunk"},
    		Callback = function(Value)
    			World = Value
    		end    
    	})
    	Pets:AddDropdown({
    		Name = "Select Egg",
    		Default = "1",
    		Options = {"Aqua", "Basic", "Forest", "Frost","Mine","Rare","Gear"},
    		Callback = function(Value)
    			Egg = Value
    			EggWorld = EggWorldViewer[Egg].World
    			print(EggWorld)
    		end
    	})
        

		--TextBoxes
		Visuals:AddTextbox({
			Name = "Notification Text",
			Default = "itsjohny14 is clown + underaged",
			TextDisappear = false,
			Callback = function(Value)
				NotificationText = Value
			end	  
		})

		--Sliders
    end
end)



if er then
    warn(er)
end
